/* SPDX-License-Identifier: GPL-3.0-or-later */
#include <@AVND_MAIN_FILE@>

#include <avnd/wrappers/effect_container.hpp>
#include <avnd/binding/standalone/standalone.hpp>
#include <avnd/binding/standalone/configure.hpp>

using type = decltype(avnd::configure<standalone::config, @AVND_MAIN_CLASS@>())::type;

void run_ui(auto& object)
{
#if AVND_STANDALONE_NKL
  if constexpr(avnd::has_ui<type>)
  {
    nkl::layout_ui< type > ui{object};
    ui.render();
  }
#elif AVND_STANDALONE_QML
  if constexpr(avnd::has_ui<type>)
  {
    qml::qml_layout_ui< type > ui{object};
    qApp->exec();
  }
  else
  {
    qml::qml_ui< type > ui{object};
    qApp->exec();
  }
#endif
}
int main(int argc, char** argv)
{
  // Create the object
  avnd::effect_container< type > object;

#if 0
  // Create an oscquery interface to it.
  standalone::oscquery_mapper< type > oscq{object};

  std::thread t{[&] { oscq.run(); }};
#endif

#if AVND_STANDALONE_QML
  qputenv("QML_DISABLE_DISTANCEFIELD", "1");
  qputenv("QT_SCALE_FACTOR", "2");
  qputenv("QT_ASSUME_STDERR_HAS_CONSOLE", "1");
  qputenv("QT_QUICK_CONTROLS_STYLE", "Material");
  qputenv("QT_QUICK_CONTROLS_MATERIAL_THEME", "Dark");

  QGuiApplication app(argc, argv);
#endif

  run_ui(object);

#if 0
  oscq.stop();
  t.join();
#endif
}
